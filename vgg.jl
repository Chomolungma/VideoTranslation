using Knet

@knet function vgg16(data; pdrop = 0.5, win = 3, pad = 1)
	# pool() functions have stride=window=2 MAXPOOL by default
	conv1_1 = wconv(data; out = 64, window = win, padding = pad)
	conv1_1 = relu(conv1_1)
	conv1_2 = wconv(conv1_1; out = 64, window = win, padding = pad)
	conv1_2 = relu(conv1_2)
	pool1 = pool(conv1_2)
	conv2_1 = wconv(pool1; out = 128, window = win, padding = pad)
	conv2_1 = relu(conv2_1)
	conv2_2 = wconv(conv2_1; out = 128, window = win, padding = pad)
	conv2_2 = relu(conv2_2)
	pool2 = pool(conv2_2)
	conv3_1 = wconv(pool2; out = 256, window = win, padding = pad)
	conv3_1 = relu(conv3_1)
	conv3_2 = wconv(conv3_1; out = 256, window = win, padding = pad)
	conv3_2 = relu(conv3_2)
	conv3_3 = wconv(conv3_2; out = 256, window = win, padding = pad)
	conv3_3 = relu(conv3_3)
	pool3 = pool(conv3_3)
	conv4_1 = wconv(pool3; out = 512, window = win, padding = pad)
	conv4_1 = relu(conv4_1)
	conv4_2 = wconv(conv4_1; out = 512, window = win, padding = pad)
	conv4_2 = relu(conv4_2)
	conv4_3 = wconv(conv4_2; out = 512, window = win, padding = pad)
	conv4_3 = relu(conv4_3)
	pool4 = pool(conv4_3)
	conv5_1 = wconv(pool4; out = 512, window = win, padding = pad)
	conv5_1 = relu(conv5_1)
	conv5_2 = wconv(conv5_1; out = 512, window = win, padding = pad)
	conv5_2 = relu(conv5_2)
	conv5_3 = wconv(conv5_2; out = 512, window = win, padding = pad)
	conv5_3 = relu(conv5_3)
	pool5 = pool(conv5_3)
	fc6 = wf(pool5; out = 4096, f = :relu)
	fc6 = drop(fc6; pdrop = pdrop)
	fc7 = wf(fc6; out = 4096, f = :relu)
	return fc7
end
